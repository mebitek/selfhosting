version: '3.8'

services:
  mastodon-db:
    image: 'postgres:15-alpine'
    restart: always
    volumes:
      - '/home/mebitek/mastodon/mastodon-db-volume:/var/lib/postgresql/data'
    environment:
      POSTGRES_DB: '${MASTODON_POSTGRES_DATABASE}'
      POSTGRES_USER: '${MASTODON_POSTGRES_USERNAME}'
      POSTGRES_PASSWORD: '${MASTODON_POSTGRES_PASSWORD}'
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', '${MASTODON_POSTGRES_USERNAME}', '-d', '${MASTODON_POSTGRES_DATABASE}']
      interval: 5s
      timeout: 5s

  mastodon-redis:
    image: 'redis:alpine'
    restart: always
    command: 'redis-server --save 60 1 --loglevel warning'
    volumes:
      - '/home/mebitek/mastodon/mastodon-redis-volume:/data'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s

  mastodon-web:
    extends:
      file: 'docker-compose.base.yaml'
      service: 'mastodon-base'
    command: 'bash -c "/provision.sh; rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000 -b 0.0.0.0"'
    volumes:
      - './provision.sh:/provision.sh:ro'
    ports:
      - 3000:3000
    environment:
      PUID: 991
      GUID: 991
      MASTODON_ADMIN_USERNAME: '${MASTODON_ADMIN_USERNAME}'
      MASTODON_ADMIN_EMAIL: '${MASTODON_ADMIN_EMAIL}'
      WEB_CONCURRENCY: 2
      MAX_THREADS: 4
      SINGLE_USER_MODE: "true" 
    healthcheck:
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:3000/health || exit 1']
      interval: 5s
      timeout: 5s
      retries: 12
    depends_on:
      mastodon-db:
        condition: service_healthy
      mastodon-redis:
        condition: service_healthy
      mastodon-es:
        condition: service_healthy
 
  mastodon-streaming:
    extends:
      file: 'docker-compose.base.yaml'
      service: 'mastodon-base'
    command: 'node ./streaming'
    environment:
      STREAMING_CLUSTER_NUM: 4
    ports:
      - 4000:4000
    healthcheck:
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1']
    depends_on:
      mastodon-web:
        condition: service_healthy

  mastodon-es:
    image: 'docker.elastic.co/elasticsearch/elasticsearch:7.17.7'
    restart: always
    volumes:
      - '/home/mebitek/mastodon/mastodon-es-volume:/usr/share/elasticsearch/data'
    environment:
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
      - 'xpack.license.self_generated.type=basic'
      - 'xpack.security.enabled=false'
      - 'xpack.watcher.enabled=false'
      - 'xpack.graph.enabled=false'
      - 'xpack.ml.enabled=false'
      - 'bootstrap.memory_lock=true'
      - 'cluster.name=mastodon-es'
      - 'discovery.type=single-node'
      - 'thread_pool.write.queue_size=1000'
      - 'ingest.geoip.downloader.enabled=false'
    healthcheck:
      test: ['CMD-SHELL', 'curl --silent --fail localhost:9200/_cluster/health || exit 1']
      interval: 5s
      timeout: 5s
      retries: 6

  mastodon-proxy:
    image: 'caddy:latest'
    restart: always
    volumes:
      - '/home/mebitek/compose/mastodon/certs:/root/certs'
      - '/home/mebitek/mastodon/caddy-data-volume:/data'
      - '/home/mebitek/mastodon/caddy-config-volume:/config'
      - '/home/mebitek/compose/mastodon/caddyfile:/etc/caddy/Caddyfile:ro'
    environment:
      MASTODON_DOMAIN: '${MASTODON_DOMAIN}'
    ports:
      - '8443:443'
    depends_on:
      mastodon-web:
        condition: service_healthy

  mastodon-sidekiq:
    extends:
      file: 'docker-compose.base.yaml'
      service: 'mastodon-base'
    command: 'bundle exec sidekiq'
    healthcheck:
      test: ['CMD-SHELL', "ps aux | grep '[s]idekiq\ 6' || false"]
    depends_on:
      mastodon-web:
        condition: service_healthy
      

volumes:
  mastodon-db-volume:
    external: true
  mastodon-volume:
    external: true
  caddy-data-volume:
    external: true
  caddy-config-volume:
    external: true
  mastodon-es-volume:
    external: true
  mastodon-redis-volume:
    external: true
